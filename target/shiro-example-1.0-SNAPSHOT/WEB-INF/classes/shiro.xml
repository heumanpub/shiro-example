<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    <!--<bean id="credentials" class="com.heuman.common.config.shiro.CustomCredentialsMatcher" />-->
    <bean id="customRealm" class="com.heuman.common.config.shiro.CustomRealm">
        <property name="userService">
            <bean class="com.heuman.service.UserService"/>
        </property>
        <!--<property name="credentialsMatcher" ref="credentials" />-->
        <!-- 此处不验证 -->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.AllowAllCredentialsMatcher"/>
        </property>
        <property name="cachingEnabled" value="true"/>
    </bean>
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionIdUrlRewritingEnabled" value="true"/>
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="sessionIdCookie">
            <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                <property name="httpOnly" value="true"/>
                <property name="name" value="sid"/>
            </bean>
        </property>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionValidationInterval" value="300000"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionDAO">
            <bean class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"/>
        </property>
    </bean>
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="customRealm"/>
        <!--<property name="cacheManager" ref="cacheManager"/>-->
        <property name="cacheManager">
            <bean class="org.apache.shiro.cache.MemoryConstrainedCacheManager"/>
        </property>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <bean id="cacheManager" class="com.heuman.common.config.shiro.CustomCacheManager"/>
    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
        <property name="loginUrl" value="/login"/>
    </bean>
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <!--<property name="successUrl" value="/index.jsp"/>-->
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <property name="filters">
            <util:map>
                <entry key="custom" value-ref="formAuthenticationFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /favicon.ico = anon
                /static/** = anon
                login.jsp = anon
                /login = anon
                /captcha = anon
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
    </bean>
</beans>